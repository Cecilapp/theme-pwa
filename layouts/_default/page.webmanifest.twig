{#- icons #}
{%- macro icon(asset, purpose = '') -%}
    {
      "src": "{{ asset|url }}",
      "sizes": "{{ asset.width }}x{{ asset.height }}",
      "type": "{{ asset.subtype }}"
      {%- if purpose %},
      "purpose": "{{ purpose }}"
      {%- endif ~%}
    }
{%- endmacro %}
{%- set icons %}
  {%- if site.manifest.icons|default([])|length > 0 %}
    {%- for icon in site.manifest.icons %}
      {#- icon with options #}
      {%- if icon is iterable %}
        {%- set icon_asset = asset(icon.src) -%}
    {
      "src": "{{ icon_asset|url }}",
      "sizes": "{{ icon.sizes|default(icon_asset.width ~ 'x' ~ icon_asset.height) }}",
      "type": "{{ icon.type|default(icon_asset.subtype) }}",
      "purpose": "{{ icon.purpose|default('any') }}"
    }
      {#- icon file only #}
      {%- else %}
        {%- set icon_asset = asset(icon) -%}
    {{- _self.icon(icon_asset) }}
    {%- endif %}{% if loop.length > 1 and not loop.last %},{% endif %}
    {%- endfor %}
  {%- else %}
    {# creates icons from `icon.png` if exists #}
    {%- set icon_asset = asset('icon.png', {'ignore_missing': true}) %}
    {%- if not icon_asset.missing %}
    {{- _self.icon(icon_asset|resize(192)) }},
    {{- _self.icon(icon_asset|resize(512)) }},
    {{- _self.icon(icon_asset|resize(192)|maskable, 'maskable') }},
    {{- _self.icon(icon_asset|resize(512)|maskable, 'maskable') }}
    {%- endif %}
  {%- endif %}
{% endset -%}
{#- screenshots #}
{%- set screenshots %}
  {%- for screenshot in site.manifest.screenshots|default([]) -%}
    {%- set screenshot_asset = asset(screenshot) -%}
    {
      "src": "{{ screenshot_asset|url }}",
      "sizes": "{{ screenshot_asset.width }}x{{ screenshot_asset.height }}",
      "type": "{{ screenshot_asset.subtype }}",
      "form_factor": "{% if screenshot_asset.width < screenshot_asset.height %}narrow{% else %}wide{% endif %}"
    }{% if loop.length > 1 and not loop.last %},{% endif %}
  {%- endfor %}
{% endset -%}
{#- main -#}
{
  "name": "{{ site.title }}",
  "short_name": "{{ site.title[:12] }}",
  "description": "{{ site.description }}",
  "display": "{{ site.manifest.display|default('standalone') }}",
  "start_url": "{{ site.manifest.start_url|default(url(site.home, {canonical: true})) }}",
  "id": "{{ site.manifest.id|default(url(site.home, {canonical: true})) }}",
  "orientation": "{{ site.manifest.orientation|default('any') }}",
  "background_color": "{{ site.manifest.background_color|default('#FFFFFF') }}",
  "theme_color": "{{ site.manifest.theme_color|default('#202020') }}",
  "lang": "{{ site.language|default('en') }}",
  "dir": "{{ site.manifest.dir|default('ltr') }}",
  "icons": [
    {{ icons }}
  ],
  {%- if screenshots %}
  "screenshots": [
    {{- screenshots -}}
  ]
  ,{%- endif %}
  {%- if site.serviceworker.enabled|default(false) ~%}
  "serviceworker": {
    "src": "{{ url(site.page('serviceworker'), {canonical: true}) }}",
    "scope": "/",
    "use_cache": false
  }
  {%- endif -%}
  {%- if site.manifest.shortcuts|default(false) and site.menus.main|length > 0 %},
  "shortcuts": [
  {%- for item in site.menus.main|filter(i => 'http' not in i.url)|sort_by_weight ~%}
    {
      "name": "{{ item.name }}",
      "url": "{{ url(item.url) }}",
      "icons": [
        {
          "src": "{{ asset('icon-link.png')|url }}",
          "sizes": "{{ asset('icon-link.png').width }}x{{ asset('icon-link.png').height }}",
          "type": "{{ asset('icon-link.png').subtype }}"
        }
      ]
    }{% if loop.length > 1 and not loop.last %},{% endif ~%}
  {%- endfor ~%}
  ]
  {%- endif ~%}
}