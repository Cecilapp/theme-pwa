    {#- service worker registration ~#}
    <script>{% apply minify_js ~%}
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          {%- if site.serviceworker.update.notification|default(false) ~%}
          // checks notification permission
          Notification.requestPermission(permission => {
            if (!('permission' in Notification)) {
              Notification.permission = permission;
            }
            return permission;
          })
          {%- endif ~%}
          {%- if site.serviceworker is defined and site.serviceworker.enabled ~%}
          // register service worker
          navigator.serviceWorker
            .register('{{ url(site.page('serviceworker'), {canonical: true}) }}', { scope: '/' })
            .then(function (registration) {
              {%- if site.debug|default(false) ~%}
              console.log('[SW] Registration successful with scope', registration.scope);
              {%- endif ~%}
              // checks if site have been updated
              //registration.update();
              registration.addEventListener('updatefound', () => {
                const installingSW = registration.installing;
                {%- if site.debug|default(false) ~%}
                console.log('[SW] A new version is being installed:', installingSW.state);
                {%- endif ~%}
                installingSW.onstatechange = () => {
                  if (installingSW.state === 'installed') {
                    if (navigator.serviceWorker.controller) {
                      {%- if site.debug|default(false) ~%}
                      console.log('[SW] New version is available.');
                      {%- endif ~%}
                      {%- if site.serviceworker.update.snackbar|default(false) ~%}
                      // snackbar
                      showSnackbar('{{ "New version is available, please reload"|trans }}');
                      {%- endif ~%}
                      {%- if site.serviceworker.update.badge|default(false) ~%}
                      // badge
                      if (navigator.setAppBadge) {
                        navigator.setAppBadge();
                        setTimeout(() => {
                          navigator.clearAppBadge();
                        }, 3000);
                      }
                      {%- endif ~%}
                      {%- if site.serviceworker.update.notification|default(false) ~%}
                      // notification
                      {%- if site.debug|default(false) ~%}
                      console.log('[SW] Notification enabled');
                      {%- endif ~%}
                      Notification.requestPermission().then((result) => {
                        if (result === "granted") {
                          navigator.serviceWorker.ready.then((registration) => {
                            const title = "{{ 'Update of %title%'|trans({'%title%': site.title}) }}";
                            const options = {
                              body: "{{ 'Website updated since your last visit.'|trans }}",
                              icon: '{{ asset(site.manifest.icons|first) }}',
                              vibrate: [200, 100, 100, 100]
                            };
                            registration.showNotification(title, options);
                          });
                        }
                      });
                      {%- endif ~%}
                    }
                  }
                }
              });
            })
            .catch(function (error) {
              console.log('[SW]', error);
            });
          {%- endif ~%}
          {%- if site.serviceworker is defined and not site.serviceworker.enabled ~%}
          // Service worker is disabled:
          // 1. unregister
          navigator.serviceWorker.getRegistrations().then(registrations => {
            registrations.forEach(registration => {
              {%- if site.debug|default(false) ~%}
              console.log('[SW] Unregister');
              {%- endif ~%}
              registration.unregister()
            })
          })
          // 2. remove cache
          caches.keys().then(function(keyList) {
            Promise.all(keyList.map(function(key) {
              {%- if site.debug|default(false) ~%}
              console.log('[SW] Remove cache');
              {%- endif ~%}
              caches.delete(key);
            }));
          });
          {%- endif ~%}
        })
      }
      {%- if not site.serviceworker.install.prompt ?? false ~%}
      // install prompt
      window.addEventListener('load', () => {
        window.addEventListener('beforeinstallprompt', (event) => {
          event.preventDefault();
          {%- if site.serviceworker.install.button is not empty ~%}
          installPrompt = event;
          installButton.removeAttribute('hidden');
          {%- endif ~%}
        });
          {%- if site.serviceworker.install.button is not empty ~%}
        let installPrompt = null;
        const installButton = document.querySelector('{{ site.serviceworker.install.button }}');
        installButton.addEventListener('click', async () => {
          if (!installPrompt) {
            return;
          }
          const result = await installPrompt.prompt();
          {%- if site.debug|default(false) ~%}
          console.log('[WS] Install prompt was:', result.outcome);
          {%- endif ~%}
          disableInAppInstallPrompt();
        });
        window.addEventListener('appinstalled', () => {
          {%- if site.debug|default(false) ~%}
          console.log('[WS] PWA installed');
          {%- endif ~%}
          disableInAppInstallPrompt();
        });
        function disableInAppInstallPrompt() {
          installPrompt = null;
          installButton.setAttribute('hidden', '');
        }
          {%- endif ~%}
      })
      {%- endif ~%}
      {%- if site.serviceworker is defined and site.debug|default(false) ~%}
      // cache storage usage
      if ('webkitTemporaryStorage' in navigator && 'queryUsageAndQuota' in navigator.webkitTemporaryStorage) {
        navigator.webkitTemporaryStorage.queryUsageAndQuota(
          function (usedBytes, grantedBytes) {
            console.log('Storage usage:', (usedBytes / 1048576).toFixed(2), '/', (grantedBytes / 1048576).toFixed(0), 'Mo');
          },
          function (error) { console.log('Error', error); }
        );
      };
      {%- endif ~%}
      // offline?
      window.addEventListener('offline', () => {
        console.log('Network connection lost.');
        {%- if site.serviceworker.offline.snackbar|default(false) ~%}
        // snackbar
        showSnackbar('{{ "You are offline"|trans }}');
        {%- endif ~%}
      });
    {% endapply %}</script>
    {#- snackbar element ~#}
    <style>{% apply minify_css ~%}
      #snackbar {
        visibility: hidden;
        min-width: 250px;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 4px;
        padding: 8px 16px;
        position: fixed;
        z-index: 1;
        left: 50%;
        transform: translate(-50%);
        bottom: 20px;
        font-size: 16px;
      }
      #snackbar.show {
        visibility: visible;
        -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
        animation: fadein 0.5s, fadeout 0.5s 2.5s;
      }
      @-webkit-keyframes fadein {
        from {opacity: 0;}
        to {opacity: 1;}
      }
      @keyframes fadein {
        from {opacity: 0;}
        to {opacity: 1;}
      }
      @-webkit-keyframes fadeout {
        from {opacity: 1;}
        to {opacity: 0;}
      }
      @keyframes fadeout {
        from {opacity: 1;}
        to {opacity: 0;}
      }
    {% endapply %}</style>
    <script>{% apply minify_js ~%}
      // add `<div id="snackbar"></div>` in body
      function addSnackbar() {
        const snackbar = document.createElement('div');
        snackbar.setAttribute('id', 'snackbar');
        document.body.appendChild(snackbar);
      }
      // show snackbar div
      function showSnackbar(message) {
        var snackbar = document.getElementById('snackbar');
        snackbar.className = 'show';
        snackbar.innerHTML = message;
        setTimeout(() => {
          snackbar.className = snackbar.className.replace('show', '');
        }, 3000);
      }
      addEventListener('load', () => {
        addSnackbar();
      });
    {% endapply %}</script>